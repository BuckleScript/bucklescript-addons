// Generated by BUCKLESCRIPT VERSION 1.4.3, PLEASE EDIT WITH CARE
'use strict';


function assert_bool(b, loc) {
  if (b) {
    return /* () */0;
  }
  else {
    console.log("Assertion Failure. " + loc);
    return /* () */0;
  }
}

function fail(loc) {
  console.log("Assertion Failure. " + loc);
  return /* () */0;
}

function thenTest() {
  var p = Promise.resolve(4);
  return p.then(function (x) {
              return assert_bool(+(x === 4), 'File "test/bs_promise_test.ml", line 37, characters 49-56');
            });
}

function andThenTest() {
  var p = Promise.resolve(6);
  return p.then(function () {
                return Promise.resolve(12);
              }).then(function (y) {
              return assert_bool(+(y === 12), 'File "test/bs_promise_test.ml", line 42, characters 50-57');
            });
}

function catchTest() {
  var p = Promise.reject("error");
  return p.then(function () {
                console.log('Assertion Failure. File "test/bs_promise_test.ml", line 46, characters 34-41');
                return /* () */0;
              }).catch(function (error) {
              return assert_bool(+(error === "error"), 'File "test/bs_promise_test.ml", line 47, characters 63-70');
            });
}

function orResolvedTest() {
  var p = Promise.resolve(42);
  return p.catch(function () {
                  return 22;
                }).then(function (value) {
                return assert_bool(+(value === 42), 'File "test/bs_promise_test.ml", line 52, characters 58-65');
              }).catch(function () {
              console.log('Assertion Failure. File "test/bs_promise_test.ml", line 53, characters 34-41');
              return /* () */0;
            });
}

function orRejectedTest() {
  var p = Promise.reject("error");
  return p.catch(function () {
                  return 22;
                }).then(function (value) {
                return assert_bool(+(value === 22), 'File "test/bs_promise_test.ml", line 58, characters 58-65');
              }).catch(function () {
              console.log('Assertion Failure. File "test/bs_promise_test.ml", line 59, characters 34-41');
              return /* () */0;
            });
}

function orElseResolvedTest() {
  var p = Promise.resolve(42);
  return p.catch(function () {
                  return Promise.resolve(22);
                }).then(function (value) {
                return assert_bool(+(value === 42), 'File "test/bs_promise_test.ml", line 64, characters 58-65');
              }).catch(function () {
              console.log('Assertion Failure. File "test/bs_promise_test.ml", line 65, characters 34-41');
              return /* () */0;
            });
}

function orElseRejectedResolveTest() {
  var p = Promise.reject("error");
  return p.catch(function () {
                  return Promise.resolve(22);
                }).then(function (value) {
                return assert_bool(+(value === 22), 'File "test/bs_promise_test.ml", line 70, characters 58-65');
              }).catch(function () {
              console.log('Assertion Failure. File "test/bs_promise_test.ml", line 71, characters 34-41');
              return /* () */0;
            });
}

function orElseRejectedRejectTest() {
  var p = Promise.reject("error");
  return p.catch(function () {
                  return Promise.reject("error 2");
                }).then(function () {
                console.log('Assertion Failure. File "test/bs_promise_test.ml", line 76, characters 34-41');
                return /* () */0;
              }).catch(function (error) {
              return assert_bool(+(error === "error 2"), 'File "test/bs_promise_test.ml", line 77, characters 65-72');
            });
}

function resolveTest() {
  var p1 = Promise.resolve(10);
  return p1.then(function (x) {
              return assert_bool(+(x === 10), 'File "test/bs_promise_test.ml", line 81, characters 51-58');
            });
}

function rejectTest() {
  var p = Promise.reject("error");
  return p.catch(function (error) {
              return assert_bool(+(error === "error"), 'File "test/bs_promise_test.ml", line 85, characters 63-70');
            });
}

function thenCatchChainResolvedTest() {
  var p = Promise.resolve(20);
  return p.then(function (value) {
                return assert_bool(+(value === 20), 'File "test/bs_promise_test.ml", line 89, characters 58-65');
              }).catch(function () {
              console.log('Assertion Failure. File "test/bs_promise_test.ml", line 90, characters 34-41');
              return /* () */0;
            });
}

function thenCatchChainRejectedTest() {
  var p = Promise.reject("error");
  return p.then(function () {
                console.log('Assertion Failure. File "test/bs_promise_test.ml", line 94, characters 34-41');
                return /* () */0;
              }).catch(function (error) {
              return assert_bool(+(error === "error"), 'File "test/bs_promise_test.ml", line 95, characters 63-70');
            });
}

function allResolvedTest() {
  var p1 = Promise.resolve(1);
  var p2 = Promise.resolve(2);
  var p3 = Promise.resolve(3);
  var promises = /* array */[
    p1,
    p2,
    p3
  ];
  return Promise.all(promises).then(function (resolved) {
              assert_bool(+(resolved[0] === 1), 'File "test/bs_promise_test.ml", line 105, characters 39-46');
              assert_bool(+(resolved[1] === 2), 'File "test/bs_promise_test.ml", line 106, characters 39-46');
              return assert_bool(+(resolved[2] === 3), 'File "test/bs_promise_test.ml", line 107, characters 39-46');
            });
}

function allRejectTest() {
  var p1 = Promise.resolve(1);
  var p2 = Promise.resolve(3);
  var p3 = Promise.reject("error");
  var promises = /* array */[
    p1,
    p2,
    p3
  ];
  return Promise.all(promises).then(function () {
                console.log('Assertion Failure. File "test/bs_promise_test.ml", line 115, characters 34-41');
                return /* () */0;
              }).catch(function (error) {
              return assert_bool(+(error === "error"), 'File "test/bs_promise_test.ml", line 116, characters 63-70');
            });
}

function raceTest() {
  var p1 = Promise.resolve("first");
  var p2 = Promise.resolve("second");
  var p3 = Promise.resolve("third");
  var promises = /* array */[
    p1,
    p2,
    p3
  ];
  return Promise.race(promises).then(function (resolved) {
                return assert_bool(+(resolved === "first"), 'File "test/bs_promise_test.ml", line 124, characters 69-76');
              }).catch(function () {
              console.log('Assertion Failure. File "test/bs_promise_test.ml", line 125, characters 34-41');
              return /* () */0;
            });
}

function createPromiseRejectTest() {
  return new Promise(function (_, reject) {
                return reject("error");
              }).catch(function (error) {
              return assert_bool(+(error === "error"), 'File "test/bs_promise_test.ml", line 129, characters 63-70');
            });
}

function createPromiseFulfillTest() {
  return new Promise(function (resolve, _) {
                  return resolve("success");
                }).then(function (resolved) {
                return assert_bool(+(resolved === "success"), 'File "test/bs_promise_test.ml", line 133, characters 71-78');
              }).catch(function () {
              console.log('Assertion Failure. File "test/bs_promise_test.ml", line 134, characters 34-41');
              return /* () */0;
            });
}

thenTest(/* () */0);

andThenTest(/* () */0);

catchTest(/* () */0);

orResolvedTest(/* () */0);

orRejectedTest(/* () */0);

orElseResolvedTest(/* () */0);

orElseRejectedResolveTest(/* () */0);

orElseRejectedRejectTest(/* () */0);

thenCatchChainResolvedTest(/* () */0);

thenCatchChainRejectedTest(/* () */0);

allResolvedTest(/* () */0);

allRejectTest(/* () */0);

raceTest(/* () */0);

createPromiseRejectTest(/* () */0);

createPromiseFulfillTest(/* () */0);

exports.assert_bool                = assert_bool;
exports.fail                       = fail;
exports.thenTest                   = thenTest;
exports.andThenTest                = andThenTest;
exports.catchTest                  = catchTest;
exports.orResolvedTest             = orResolvedTest;
exports.orRejectedTest             = orRejectedTest;
exports.orElseResolvedTest         = orElseResolvedTest;
exports.orElseRejectedResolveTest  = orElseRejectedResolveTest;
exports.orElseRejectedRejectTest   = orElseRejectedRejectTest;
exports.resolveTest                = resolveTest;
exports.rejectTest                 = rejectTest;
exports.thenCatchChainResolvedTest = thenCatchChainResolvedTest;
exports.thenCatchChainRejectedTest = thenCatchChainRejectedTest;
exports.allResolvedTest            = allResolvedTest;
exports.allRejectTest              = allRejectTest;
exports.raceTest                   = raceTest;
exports.createPromiseRejectTest    = createPromiseRejectTest;
exports.createPromiseFulfillTest   = createPromiseFulfillTest;
/* prim Not a pure module */
